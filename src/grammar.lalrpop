use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement};

grammar;

Expr: Box<Expr> = { // (1)
    Expr AddOp Factor => Box::new(Expr::BinaryOp(<>)), // (2)
    Factor,
};

AddOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor MulOp Unary => Box::new(Expr::BinaryOp(<>)),
    Unary,
};

MulOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Unary: Box<Expr> = { // (1)
    UnaryOp Unary => Box::new(Expr::UnaryOp(<>)), // (2)
    Power,
};

UnaryOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Power: Box<Expr> = {
    Power ExpOp Access => Box::new(Expr::BinaryOp(<>)),
    Access,
};

ExpOp: Opcode = {
    "**" => Opcode::Pow,
};

Access: Box<Expr> = {
    AttrAccess,
    ItemSubscription,
    FunctionCall,
    Literal
};

AttrAccess: Box<Expr> = {
    <expr: Access> "." <name: Name> => Box::new(Expr::AttrAccess(expr, name)),
};

ItemSubscription: Box<Expr> = {
    <expr: Access> "[" <subscr: Expr> "]" => Box::new(Expr::ItemSubscription(expr, subscr)),
};

FunctionCall: Box<Expr> = {
    <fun: Access> "(" <args: ValuesList> ")" => Box::new(Expr::FunctionCall(fun, args)),
    <fun: Access> "(" ")" => Box::new(Expr::FunctionCall(fun, Vec::new())),
};

Literal: Box<Expr> = {
    Integer,
    String,
    Float,
    List,
    Variable,
    Boolean,
    "(" <Expr> ")"
}

Integer: Box<Expr> = {
    r"[+-]?\d+" => Box::new(Expr::Integer(i32::from_str(<>).unwrap()))
};

Float: Box<Expr> = {
    r"[+-]?\d+\.(\d+)?" => Box::new(Expr::Float(f32::from_str(<>).unwrap()))
};

Boolean: Box<Expr> = {
    "true" => Box::new(Expr::Boolean(true)),
    "false" => Box::new(Expr::Boolean(false)),
};

String: Box<Expr> = {
    r#"".*""# => {
        let mut chars = <>.chars();
        chars.next();
        chars.next_back();
        Box::new(Expr::Str(chars.as_str().into()))
    }
};

ValuesList: Vec<Box<Expr>> = {
    <Expr> => Vec::from([<>]),
    <mut old: ValuesList> "," <new: Expr> => {
        old.push(new);
        return old
    }
}

List: Box<Expr> = {
    "[" <ValuesList> "]" => Box::new(Expr::List(<>))
}

Variable: Box<Expr> = {
    Name => Box::new(Expr::Variable(<>))
}

Name: String = {
    r"\p{L}(\p{L}|\d)*" => <>.into()
}

ArgumentList: Vec<String> = {
    <Name> => Vec::from([<>]),
    <mut old: ArgumentList> "," <new: Name> => {
        old.push(new);
        return old
    },
    "(" <ArgumentList> ")",
    "(" ")" => Vec::new()
}

If: Box<Statement> = {
    "if" <cond: Expr> "{" <body: Body> "}" => Box::new(Statement::If(cond, body, None)),
    "if" <cond: Expr> "{" <body: Body> "}" "else" "{" <elsebody: Body> "}" => Box::new(Statement::If(cond, body, Some(elsebody)))
}

While: Box<Statement> = {
    "while" <cond: Expr> "{" <body: Body> "}" => Box::new(Statement::While(cond, body)),
}

Function: Box<Statement> = {
    "fun" <name: Name> <args: ArgumentList> "{" <body: Body> "}" => Box::new(Statement::Function(name, Box::new(args), body)),
}

Assignment: Box<Statement> = {
    <Name> "=" <Expr> => Box::new(Statement::Assignment(<>)),
}

pub Body: Vec<Box<Statement>> = {
    <Statement> ";" => Vec::from([<>]),
    <mut old: Body> <new: Statement> ";" => {
        old.push(new);
        return old
    },
}

pub Statement: Box<Statement> = {
    Expr => Box::new(Statement::Expression(<>)),
    If,
    Function,
    Assignment,
    While,
}